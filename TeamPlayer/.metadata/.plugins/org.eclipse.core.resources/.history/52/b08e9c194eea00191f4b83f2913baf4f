package client;

import bus.*;

import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.Random;
import java.util.Scanner;
import java.util.Stack;
import java.util.Locale.Category;

public class TesterV2{
    public static void main(String[] args) {
        
        ArrayList<IPlayable> iPlayableList = new ArrayList<IPlayable>();

        // Basketball player
        Stack<Ball> ballStack = new Stack<Ball>();
        Scanner inputScanner = new Scanner(System.in);
        EnumType playerType;
        String playerInput = "";
        long id;
        String name;

        
        while(!playerInput.equals("exit"))
        {
            // Introduction of games
            System.out.println("Your options: ");
            System.out.println((" 1. Basketball Player \n 2. Guitar Player \n 3. Dice Player \n 4. Show All Players"));
            System.out.println("Please choose your player type by enter the number 1, 2, 3 or 4: ");
            System.out.println("You can also input [exit] to quit this application");
            
            // Dice player parameter
            int point = 0;

            playerInput = inputScanner.nextLine();
            
            try{
                int playerInputToInt = Integer.parseInt(playerInput);
                // Switch between different players
                switch(playerInputToInt){
        
                    // Case that you choose Basketball Player
                    case 1:
                    	BasketballGame basketballGame = new BasketballGame();
	                    basketballGame.Start();
	                    basketballGame.Run();
	                    iPlayableList.add(new BasketballPlayer(basketballGame.getId(), basketballGame.getName(), basketballGame.getCategory(), ballStack, basketballGame.getScore()));
	                    break;
        
                    // Case that you choose Guitar Player
                    case 2:
                    System.out.println("You choosed Guitar Player");
                    playerType = EnumType.GuitarPlayer;
                    while(!playerInput.equals("back")){
                        System.out.println("Choose a music by input the index of the music");
                        System.out.println(" 1. Secret Base \n 2. Miracle Mountain");
                        System.out.println("or input [back] to exit the application");
                        playerInput = inputScanner.nextLine();
        
                        if(playerInput.equals("1")){
                            System.out.println("Play \"Secret Base\"");
                        }else if(playerInput.equals("2")){
                            System.out.println("Play \"Miracle Mountain\"");
                        }else if(playerInput.equals("back")){
                            break;
                        }
                        else{
                            System.out.println("I don't understand");
                            System.out.println("Choose a music by input the index of the music");
                            System.out.println(" 1. Secret Base \n 2. Miracle Mountain");
                            System.out.println("or input [back] to exit the application");
                        }
                    }
        
                    break;
        
                    // Case that you choose Dice Player
                    case 3:
                    System.out.println("You choosed Dice Player");
                    playerType = EnumType.DicePlayer;
                    Random randomDice = new Random();
        
                    while(!playerInput.equals("back")){
                        System.out.println("Input [r] to roll the dice, input [back] to exit the application");
                        playerInput = inputScanner.nextLine();
                        if(playerInput.equals("r")){
                            point = randomDice.nextInt(6);
                            System.out.println("You got: " + (point + 1));
                            
                        }else if(playerInput.equals("back")){
                            break;
                        }
                        else{
                            System.out.println("I don't understand...");
                        }
                    }
                    break;
                    
                    case 4:
                    for(IPlayable element : iPlayableList) {
                        if(element instanceof BasketballPlayer) {
                            System.out.println(element + " Score: " + element.countScore());
                        }
                        else if(element instanceof GuitarPlayer) {
                            System.out.println(element + " Score: " + element.countScore());
                        }
                        else if(element instanceof DicePlayer) {
                            System.out.println(element + " Score: " + element.countScore());
                        }
                    }
                    
                    /*
                    System.out.println("\n Printing the member list using the polymorphism");
                    for(IPlayable element : iPlayableList) {
                        System.out.println(element + "\tScore: " + " " + element.countScore());
                    }
                    break;

                    // By default, player will use Basketball Player
                    default:
                    System.out.println("I don't understand...");
                    */
                }
            }
            catch(NumberFormatException e){
                if(playerInput.equals("exit")){
                    System.out.println("Thanks for playing!");
                }
                else{
                    System.out.println("Your input is invalid, please try again");
                }
            }
        }
    }
                                                                                       
    // Basketball player Stack
    static void pushBall(Stack<Ball> stack, Color color, float size) {
        stack.push(new Ball(color, size));
        System.out.println("push( new Ball( " +  color + ", " + size + ")) ");
        System.out.println("stack: " + stack);
    }
    static void popBall(Stack<Ball> stack){
        System.out.print("pop -> ");
        Ball ball = (Ball) stack.pop();
        System.out.println(ball);
        System.out.println("stack: " + stack);
    }

    static int findHighestScore(int highest, int current){
        int highestScore;
        if(current > highest){
            highestScore = current;
        }
        else{
            highestScore = highest;
        }
        return highestScore;
    }
}